# Урок 3 Базовые операции
#print ('результат:', 7,15, sep='|', end='!\n')
#print('l \t \ni\nn\ne\n')
#print(5+5, 5-5, 5/5, 5*5, 5**5, 5//5, abs(-5), pow(5,3), round (5/3))
#print(min(5,6,7,-9))
#print(max(5,6,7,-9))
#input('введите свой возраст: ')

# Урок 4 Переменные и типы данных
#number = 5 #int (целое число)
#digit = 2.5677889 # float (плавующая точка)
#word = 'строка' # string (строка)
#boolean = False # bool (булевые данные)
#boolean2 = True # bool (булевые данные)
#str_num = '5'
#str_num2 = '2,56789'
#str_num3 = 'True'
#del number
#print (word + str(number + int(str_num)+ float (str_num2)+ bool (str_num3)))
#print (word * 2)

#num1 = int(input("Введие первое число: "))
#num2 = int(input("Введие второе число: "))
#num1 +=4
#print ("Результат" , num1 + num2)
#print ("Результат" , num1 * num2)
#print ("Результат" , num1 / num2)
#print ("Результат" , num1 - num2)
#print ("Результат" , num1 ** num2)
#print ("Результат" , num1 // num2)

# Урок 5 Условные операторы
#user_data = int (input('Введите число: '))
#isHappy = False
#if not isHappy and user_data ==6 or 5==5: # or
#    print('is happy')
#elif user_data ==5:
#    print("Number is 5")
#elif user_data ==7:
#    print("Number is 7")
#else:
#    print('user is unhappy')

#user_data = int (input('Введите число: '))
#if user_data != 5: #> < <= >= == !=
#   print("Мы на месте")
#    if user_data > 6:
#       print("number is bigger than 5")

#data = input()
#number = 5 if data == "five" else 0 # тернарный оператор - в одну строку
#if data == "five":
#     number = 5
#else:
#    number = 0
#print(number)

#Урок 6 Циклы и операторы
#for i in range (1,10,2): # начальное значение, конечное значение, шаг
#    print(i)

#world = 'hello word'
#for i in world:
#    print(i*3)

#count = 0
#word = "Hello World!"
#for i in word:
#    if i == "W":
#        count += 1
#print("Count", count)

#i = 5
#while i <= 15:
#    print(i)
#    i +=2

#isHasCar = True
#while isHasCar:
#    if input("Enter data: ") == "stop":
#        isHasCar = False

#for i in range (1, 11):
#    if i == 5:
#        break
#    if i % 2 == 0:
#        continue

#    print(i)

#found = None
#for i in "Hello":
#    if i == "l":
#        found = True
#        break
#else: found = False
#print(found)

# Урок 7 Списки. Функции и их методы
#nums = [5,7,24,4,68, 'hello', True, 6.7, [5,7]]
#nums [0] = 50
#nums [6] = 1.054
#print(nums)
#print(nums[4])
#print(nums[8][1]) # = print(nums[-1][1])

#numbers = [5,2,7]
#numbers.append(100)
#numbers.append(True) # добавление элемента в конец саиска
#numbers.insert(1, True) # добавление элемента по индексу
#b = [5,6,8]
#numbers.extend(b) # добавление в конец нескольких элементов
#numbers.sort() # сортировка по величине
#numbers.reverse() # сортировка методомо зеркадьного переворачивания элементов
#numbers.pop() # удаление элемента из списка (бех параметров - удаляет по умолчанию последний элемент)
#numbers.pop(2) # удаление элемента из списка по его индексу "-2" - второй элемент с конца, итд
#numbers.remove(True) # удаление элемента из списка с каким то значением
#numbers.clear() # удаляет все элементы из списка
#print(numbers)
#print(numbers.count(5)) # подсчет количество элементов по значению в списке
#print(len(numbers)) # выводит длину списка или другими словами количество элементов

# False = 0 True = 1
#nums = [5,2,7,"50", False]
#for el in nums:
#    el *=2 # умножение каждого элемента списка на 2
#    print(el)

#n = int (input('Enter lenght: '))
#user_list = []
#i = 0
#while i < n:
#    string = 'Enter element #' + str (i+1)+ ': '
#    user_list.append(input(string))
#    i += 1

#for i in user_list:
#    print(i)

# Урок 8 Функции строк. Индексы и срезы
#word = 'itproger'
#print(word[5]) # вывод конкретного элемента списка
#print(len(word))
#print(word.count('p'))  # сколько элементов в строке со значением p
#print(word.upper()) # приводит строку в верхний регистр
#print(word.lower()) # приводит строку в нижний регистр
#print(word.isupper()) # возвращает False если элементы строки не в верхнем регистре
#print(word.islower()) # возвращает False если элементы строки не в нижнем регистре
#print(word.capitalize()) # возвращает первый элемент списка слова в верхний регистр, а остальные элементы при этом переводит в нижний регистр
#print(word.find('p')) # функция поиска элементов в списке. Выводит индекс элемента где он находится
#word = 'footbal, basketball, skate'
#print(word.split(',')) # метод разбивает строку по определенному символу

#hobby = word.split(', ') # разбили строку на составляющие элементы и с каждым элементом можем теперь работать отдельно
#print(hobby[0])

# список и строка не одно и тоже. Список это набор любых элементов. Строки это то что указывается в кавычках

#for i in range (len(hobby)):
#    hobby [i] = hobby[i].capitalize()

#print(hobby)

#result = ', '.join(hobby)
#print(result)

#word = 'Footbal'
#print(word[0:6:2]) # срезы: начальный элемент перебора: конечный элемент перебора: шаг перебора

#lis = [6, 4, 'Stroka', True, 6.5]
#print(lis[2:-1:2])
#print(lis[::-1]) # зеркальный переворот списка
#print(lis[::2])

# Урок 9. Кортежи
# кортеж это тот же список, только который нельзя изменять. Другими словами это константа. Кортежи занимают меньше места в памяти. Кортежи используют для передачи данных
# для создания кортежа используются ()  круглые скобки
#data = (4, 6, 7, 3, True, 5.6, 'hello')
# затем для обращения к элементу кортежа изпользуются также как и вслусие списка квадратные скобки
#data[0]=5 # будет ошибка так как элемент не возможно изменить\переприсвоить в кортэже
#print (data [1:5])
#доступны след. функции:
#print(data.count(6)) # подсчет элементов
#print(len(data)) # подсчет длитны кортежа
#print(data) # вывод кортежа на экран
# доступны срезы для картежей

# второй способ созданяи картэжей:
#data = 5, 7, True
#print(data)
# один введенный элемент не будет являться картежем. Чтоб один элемент стал картежем нужно после элемента проставить запятую:
#data2 = 5,
#print(data2)

#переборка картежа с помощью цикла:
#data = (4, 6, 7, 3, True, 5.6, 'hello')

#for el in data:
#    print(el)

# преобразование списка в картеж
#nums = [5,7,8]

#new_data = tuple(nums) # tuple = картеж
#print(new_data)

# строку также можно преобразовать в картеж:
#word = tuple('Hello world')
#print(word)

#Списки []
#Строки
#Кортежи ()
#Словари {:}
#Множества {}

#Урок 10. Словари и работа с ними
# В словоре указывается ключ и далее его значение. Словарь образуется с помощью фигурных скобок {}
# Нельзя использовать списки [] в качестве значения ключа, а вот кортежи можно

# 1-й способ создания словоря. Данный способ создания словаря удобней, так как в этом случае в качестве ключа можно использовать не только строки, но и цифры, кортежиб булевые операторы итд
#country = {'code': 'RU', 'name': 'Russia', 'population': 146}
#print(country['name'])

# 2-й способ создания словаря
#country = dict(code = 'RU', name = 'Russian', population = 146)
#country = {'code': 'RU', 'name': 'Russia', 'population': 146}
#print(country)

#перебор словаря:
#for key, value in country.items(): #country.items() - items выводит ключ и значения словаря
#    print(key, '- ', value)

# Команды для работы со словарем
#country = {'code': 'RU', 'name': 'Russia', 'population': 146}

#print(country['code']) #пример вывода элемента по ключю
#print(country.get('code')) #тоже самое, что и предыдущая команда тольео с использование команды get
#country.clear() # clear это метод удаления элементов словаря от всех элементов
#country.pop('name') # удаление элемента словаря по ключю
#country.popitem()# удаление последнего элемента в словаре. Повторный запуск этой команды приводит к удалению еще одного крайнего элемента
#country['code'] = 'USA' # метод замены значения элемента по ключу
#print(country.keys()) # keys позволяет выводить только ключи словаря
#print(country.values()) # values позволяет выводить только значения словаря
#print(country.items()) # items позволяет выводить и ключи и их значения

#словари очень удобны для описания объектов:

#person = {
#    'user_1': {
#        'first_name' : 'John',
#        'last_name' : 'Marlin',
#        'age' : 45,
#        'Adresse' : ['Николая Островского 150-1-70', 'Астрахань'],
#        'hobbys' : {'плавание': 5, 'прогулка' : 23}
#    },
#    'user_2' : {}
#}

#print(person['user_1']['Adresse'][0])

# Урок 11. Множества (set и  frozenset)
# Множеста = списки, только элементы его идут в случайном порядке и в множестве не может быть повторяющихся элементов. Множества могут быть полезны если нужно удалить из имеющегося списка все повторяющееся элементы путем преобразования его в множество и\или если необходимо расположить все элементы списка в случайном порядкею
# метод split разделяет элементы
# множество образуется с помощью функции set()
# второй способ образования множества с помощью {}. Только в отличии от словаря не нужно прописывать ключ и значение, а просто прописывать элементы без ключа. При внесении ключ-значения мы получим словарь, а не множество. Другими словами если указывать ключи то получим словарь, если не указывать то получим множество
# работая со множествами мы не можем обратиться к его элементам по индексу
# удалять и добавлять новые элементы мы всегда можем
# frozenset - создает множества, которые нельзя никак изменять  (по типу картежей)

#data = set('hello')
#data = {5,7,4,3,5,56}
#data.add (32) # добавление  одного элемента в множество
#data.update (["32", True, 4.5678, 4, 6]) # добавление нескольких элементов в множество
#data.remove(True) # удаление элемента
#data.pop() # удаление первого жлемента множества
#data.clear() # удаление всех элементов множества

#print(data) # после исполнения элементы списка расположаться в случайном порядке и удаляться повторяющееся элементы списка

#nums = [5,7,6,2,5,13]
#nums = set(nums)
#print(nums)

#new_data = frozenset([5,7,6,2,5,13,"32", True, 4.5678, 4, 6])
#print(new_data)

#Списки []
#Строки
#Кортежи ()
#Словари {:}
#Множества {}

#Урок 12. Функции def и lambda
# функция создается с помошью def нужна она для выполнения повторяющегося своего кода. При этом print, int это тоже функции
# после указания названия функции обязательно ставим двоеточие
#def test_func():
#    pass # pass говорит, что функция ничего не будет выполнять
# после создания функции мы можем ее вызвать обычным способом, как например вызываем print ()
#test_func()

#def test_func():
#    print('hello', end= '')
#    print('!')

#test_func()

#def test_func(word):
#    print(word, end= '')
#    print('!')

#test_func('hi')
#test_func(5)

#def summa(a,b):
#    res = a+b
#    print('resalt', res)

#summa (5,7)
#summa('h', 'i')

#def summa(a,b):
#    res = a+b
#    return res

#res = summa(2,2)
#print(res)

#def summa(a,b):
#    return a+b

#res = summa (2,5)
#print(res)
#print(summa('h','i'))

#def minimal (L):
#    min_number = L[0]
#    for el in L:
#        if el < min_number:
#            min_number = el
#    return min_number  #print(min_number)

#nums1 = [2,4,7,12,1]

#min = nums1 [0]
#for el in nums1:
#    if el < min:
#        min = el

#print(min)

#nums2 = [2.3,4.45,7.56,12,1.0023]

#min2 = nums2 [0]
#for el in nums2:
#    if el < min2:
#        min2 = el

#print(min2)

#minimal(nums1)
#minimal(nums2)

#min1 = minimal(nums1)
#min2 = minimal(nums2)

#if min1 < min2:
#    print(min1)
#else:
#    print(min2)

# анонимные или лямбда функции. Переменные + действие с переменными. Лябда функция использует только одну строчку кода. Лябду удобно использовать если что то нужно сдедать не большое, маленький код
#func = lambda x,y: x*y
#res = func (2,5)
#print(res)

#Урок 13. Работа с файлами
#file = open('data/text.txt', 'w') # создание файла text.txt и w = открытие его на запись информации

#file.write('hello \n')
#file.write('!!!')

#file.close() # закрытие файла после работы с ним. Между этими крайним сторками прописывается вся логика работы с этим файлом

# a = добавление информации
# w = перезапись информации
# r = открываем для чтения

#data = input('Введите текст: ')

#file = open('data/text.txt', 'a') # a = добавление информации в конец к уже существующей информации в файле

#file.write(data + '\n')

#file.close()

#file = open('data/text.txt', 'r') # открываем файл text r = открываем для чтения

#print(file.read(3)) # функция read позволяет производить чтение с файла (выводится с помощью print)
# без передачи параметра в функцию read - читаем весь файл, введеное число показывает сколько символов должно быть прочтено

#for line in file: # данный цикл позволяет читать файл по строкам
#    print(line, end='')
# суммируем - чтение файла можно выполнять через метод read, а можно с помощью цикла

#file.close()

# Урок 14. Обработник исключений. Конструкция try-ecept